{
    "type": "directory",
    "name": ".",
    "children": [
        {
            "type": "directory",
            "name": "api",
            "children": [
                {
                    "type": "file",
                    "name": "chat.js",
                    "content": "const { Configuration, OpenAIApi } = require('openai');\nconst { Client } = require('pg');\n\nexport const maxDuration = 120; // This function can run for a maximum of 5 seconds\n\n// Inizializza la configurazione di OpenAI\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY, // Assicurati che la variabile d'ambiente sia impostata\n});\n\nconst openai = new OpenAIApi(configuration);\n\n// Configurazione del client PostgreSQL\nconst client = new Client({\n  connectionString: process.env.DATABASE_URL || 'postgres://default:8nCx5XIZurDd@ep-soft-tooth-a45f5lao-pooler.us-east-1.aws.neon.tech:5432/verceldb?sslmode=require'\n});\n\nclient.connect();\n\nmodule.exports = async (req, res) => {\n  if (req.method === 'POST') {\n    const { conversation_id, message } = req.body;\n\n    // Gestisci il caso in cui conversation_id non sia fornito (ad esempio, nuova conversazione)\n    let conversationId = conversation_id;\n\n    // Se conversationId non \u00e8 fornito, crea una nuova conversazione\n    if (!conversationId) {\n      try {\n        const result = await client.query(\n          'INSERT INTO conversations (conversation_name) VALUES ($1) RETURNING conversation_id',\n          ['Nuova Conversazione'] // Puoi personalizzare il nome della conversazione\n        );\n        conversationId = result.rows[0].conversation_id;\n      } catch (error) {\n        console.error('Errore nella creazione della nuova conversazione:', error);\n        res.status(500).json({ error: 'Errore interno del server' });\n        return;\n      }\n    }\n\n    // Recupera la cronologia dei messaggi per la conversazione corrente\n    let messages = [];\n    try {\n      messages = await getMessages(conversationId);\n    } catch (error) {\n      console.error('Errore nel recupero dei messaggi:', error);\n      res.status(500).json({ error: 'Errore interno del server' });\n      return;\n    }\n\n    // Aggiungi il messaggio dell'utente alla cronologia\n    messages.push({ role: 'user', content: message });\n\n    // Genera la risposta utilizzando l'API di OpenAI\n    try {\n      const completion = await openai.createChatCompletion({\n        model: 'o1-preview', // Sostituisci con il modello che preferisci\n        messages: messages,\n      });\n\n      const assistantMessage = completion.data.choices[0].message.content;\n\n      // Salva i messaggi nel database\n      await saveMessage(conversationId, 'user', message);\n      await saveMessage(conversationId, 'assistant', assistantMessage);\n\n      res.status(200).json({ conversation_id: conversationId, response: assistantMessage });\n    } catch (error) {\n      console.error(\n        'Errore nella chiamata all\\'API di OpenAI:',\n        error.response ? error.response.data : error.message\n      );\n      res.status(500).json({ error: 'Errore interno del server' });\n    }\n  } else {\n    res.status(405).json({ error: 'Metodo non consentito' });\n  }\n};\n\n// Funzione per ottenere i messaggi di una conversazione\nasync function getMessages(conversationId) {\n  const res = await client.query(\n    'SELECT role, content FROM messages WHERE conversation_id = $1 ORDER BY created_at ASC',\n    [conversationId]\n  );\n\n  // Mappa i messaggi nel formato richiesto dall'API di OpenAI\n  return res.rows.map((row) => ({\n    role: row.role,\n    content: row.content,\n  }));\n}\n\n// Funzione per salvare un messaggio nel database\nasync function saveMessage(conversationId, role, content) {\n  await client.query(\n    'INSERT INTO messages (conversation_id, role, content) VALUES ($1, $2, $3)',\n    [conversationId, role, content]\n  );\n}"
                },
                {
                    "type": "file",
                    "name": "conversations.js",
                    "content": "const { Client } = require('pg');\n\n// Configurazione del client PostgreSQL\nconst client = new Client({\n    connectionString: process.env.DATABASE_URL || 'postgres://default:8nCx5XIZurDd@ep-soft-tooth-a45f5lao-pooler.us-east-1.aws.neon.tech:5432/verceldb?sslmode=require'\n});\n\nclient.connect();\n\nmodule.exports = async (req, res) => {\n    if (req.method === 'GET') {\n        // Se viene passato un ID, ritorna la conversazione specifica\n        if (req.query.id) {\n            const conversationId = req.query.id;\n            const messagesRes = await client.query(\n                'SELECT role, content FROM messages WHERE conversation_id = $1 ORDER BY created_at ASC',\n                [conversationId]\n            );\n            res.status(200).json({ messages: messagesRes.rows });\n        } else {\n            // Altrimenti, ritorna tutte le conversazioni\n            const conversationsRes = await client.query(\n                'SELECT conversation_id, conversation_name FROM conversations ORDER BY created_at DESC'\n            );\n            res.status(200).json(conversationsRes.rows);\n        }\n    } else if (req.method === 'POST') {\n        const { conversation_name } = req.body;\n        const insertRes = await client.query(\n            'INSERT INTO conversations (conversation_name) VALUES ($1) RETURNING conversation_id',\n            [conversation_name]\n        );\n        const conversationId = insertRes.rows[0].conversation_id;\n        res.status(201).json({ conversation_id: conversationId });\n    } else {\n        res.status(405).json({ error: 'Metodo non consentito' });\n    }\n};"
                }
            ]
        },
        {
            "type": "file",
            "name": "index.html",
            "content": "<!DOCTYPE html>\n<html lang=\"it\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Chatbot AI</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <!-- Includi Highlight.js per la sintassi evidenziata -->\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github-dark.min.css\">\n</head>\n<body>\n    <div class=\"chat-container\">\n        <header>\n            <h1>Chatbot AI</h1>\n        </header>\n        <div id=\"conversation-list\">\n            <h2>Conversazioni</h2>\n            <ul id=\"conversations\"></ul>\n            <button id=\"new-conversation\">+ Nuova Conversazione</button>\n        </div>\n        <div id=\"chat-section\">\n            <div id=\"chat-window\"></div>\n            <div class=\"input-area\">\n                <textarea id=\"user-input\" placeholder=\"Scrivi un messaggio...\"></textarea>\n                <button id=\"send-button\">Invia</button>\n            </div>\n        </div>\n    </div>\n\n    <!-- Include le librerie di Highlight.js -->\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <!-- Includi i linguaggi che desideri supportare -->\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/python.min.js\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/html.min.js\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/css.min.js\"></script>\n    <!-- Il tuo script principale -->\n    <script src=\"script.js\"></script>\n</body>\n</html>"
        },
        {
            "type": "file",
            "name": "mappaTuttoJava.py"
        },
        {
            "type": "file",
            "name": "package.json",
            "content": "{\n    \"name\": \"o1-private-assistant\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Un'applicazione chatbot AI con OpenAI API, salvata in PostgreSQL e deployata su Vercel.\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"dev\": \"vercel dev\",\n      \"start\": \"vercel start\"\n    },\n    \"author\": \"Il tuo nome\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"openai\": \"^3.2.1\",\n      \"pg\": \"^8.10.0\",\n      \"highlight.js\": \"^11.7.0\"\n    },\n    \"devDependencies\": {\n      \"nodemon\": \"^2.0.22\"\n    }\n  }"
        },
        {
            "type": "file",
            "name": "script.js",
            "content": "document.addEventListener('DOMContentLoaded', () => {\n    const chatWindow = document.getElementById('chat-window');\n    const sendButton = document.getElementById('send-button');\n    const userInput = document.getElementById('user-input');\n    const conversationsList = document.getElementById('conversations');\n    const newConversationButton = document.getElementById('new-conversation');\n\n    let currentConversationId = null;\n\n    // Funzione per caricare le conversazioni esistenti\n    function loadConversations() {\n        fetch('/api/conversations')\n            .then(response => response.json())\n            .then(data => {\n                conversationsList.innerHTML = '';\n                data.forEach(conv => {\n                    const li = document.createElement('li');\n                    li.textContent = conv.conversation_name;\n                    li.dataset.id = conv.conversation_id;\n                    li.addEventListener('click', () => {\n                        currentConversationId = conv.conversation_id;\n                        loadConversation(conv.conversation_id);\n                    });\n                    conversationsList.appendChild(li);\n                });\n            })\n            .catch(error => console.error('Errore nel caricamento delle conversazioni:', error));\n    }\n\n    // Funzione per caricare una conversazione specifica\n    function loadConversation(conversationId) {\n        fetch(`/api/conversations?id=${conversationId}`)\n            .then(response => response.json())\n            .then(data => {\n                chatWindow.innerHTML = '';\n                data.messages.forEach(msg => {\n                    displayMessage(msg.role, msg.content);\n                });\n            })\n            .catch(error => console.error('Errore nel caricamento della conversazione:', error));\n    }\n\n    // Funzione per visualizzare un messaggio\n    function displayMessage(role, content) {\n        const messageDiv = document.createElement('div');\n        messageDiv.classList.add('message', role);\n\n        const contentDiv = document.createElement('div');\n        contentDiv.classList.add('content');\n\n        // Suddividi il contenuto in parti di testo e blocchi di codice\n        const messageParts = parseMessageContent(content);\n\n        messageParts.forEach(part => {\n            if (part.type === 'code') {\n                const pre = document.createElement('pre');\n                const code = document.createElement('code');\n                code.textContent = part.code.trim();\n                code.classList.add(part.language || 'plaintext');\n                pre.appendChild(code);\n                contentDiv.appendChild(pre);\n                // Inizializza Highlight.js\n                hljs.highlightElement(code);\n            } else {\n                const textParagraph = document.createElement('p');\n                textParagraph.textContent = part.text.trim();\n                contentDiv.appendChild(textParagraph);\n            }\n        });\n\n        messageDiv.appendChild(contentDiv);\n        chatWindow.appendChild(messageDiv);\n        chatWindow.scrollTop = chatWindow.scrollHeight;\n    }\n\n    // Funzione per verificare se il messaggio contiene un blocco di codice\n    function isCodeBlock(text) {\n        return /```[\\s\\S]*```/.test(text);\n    }\n\n    // Funzione per estrarre il codice e la lingua dal blocco di codice\n    function extractCode(text) {\n        const regex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n        const matches = regex.exec(text);\n        return {\n            language: matches[1] || '',\n            code: matches[2] || text\n        };\n    }\n\n    // Gestione dell'invio del messaggio\n    sendButton.addEventListener('click', () => {\n        const message = userInput.value.trim();\n        if (message === '') return;\n\n        displayMessage('user', message);\n        userInput.value = '';\n\n        fetch('/api/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                conversation_id: currentConversationId,\n                message: message\n            })\n        })\n            .then(response => response.json())\n            .then(data => {\n                currentConversationId = data.conversation_id;\n                displayMessage('assistant', data.response);\n            })\n            .catch(error => console.error('Errore nella comunicazione con l\\'API:', error));\n    });\n\n    // Creazione di una nuova conversazione\n    newConversationButton.addEventListener('click', () => {\n        const conversationName = prompt('Inserisci un nome per la nuova conversazione:');\n        if (conversationName) {\n            fetch('/api/conversations', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ conversation_name: conversationName })\n            })\n                .then(response => response.json())\n                .then(data => {\n                    currentConversationId = data.conversation_id;\n                    chatWindow.innerHTML = '';\n                    loadConversations();\n                })\n                .catch(error => console.error('Errore nella creazione della conversazione:', error));\n        }\n    });\n\n    // Carica le conversazioni all'avvio\n    loadConversations();\n\n    // Funzione per visualizzare un messaggio\n    \n\n    // Funzione per suddividere il messaggio in parti di testo e codice\n    function parseMessageContent(content) {\n        const regex = /```(\\w+)?\\n([\\s\\S]*?)\\n```/g;\n        const parts = [];\n        let lastIndex = 0;\n        let match;\n\n        while ((match = regex.exec(content)) !== null) {\n            // Testo prima del blocco di codice\n            if (match.index > lastIndex) {\n                parts.push({\n                    type: 'text',\n                    text: content.substring(lastIndex, match.index)\n                });\n            }\n\n            // Blocco di codice\n            parts.push({\n                type: 'code',\n                language: match[1],\n                code: match[2]\n            });\n\n            lastIndex = regex.lastIndex;\n        }\n\n        // Testo dopo l'ultimo blocco di codice\n        if (lastIndex < content.length) {\n            parts.push({\n                type: 'text',\n                text: content.substring(lastIndex)\n            });\n        }\n\n        return parts;\n    }\n});"
        },
        {
            "type": "file",
            "name": "styles.css",
            "content": "body {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #f0f2f5;\n    margin: 0;\n    padding: 0;\n}\n\n.chat-container {\n    display: flex;\n    height: 100vh;\n}\n\nheader {\n    display: flex;\n    position: fixed;\n    justify-content: center;\n    height: 12vh;\n    width: 100%;\n    background-color: #4267B2;\n    color: white;\n    z-index: 1;\n}\n\nheader h1 {\n    margin-top: auto;\n    margin-bottom: auto;\n}\n\n#conversation-list {\n    width: 20%;\n    background-color: #242526;\n    color: #e4e6eb;\n    overflow-y: auto;\n    padding: 20px 20px 20px; /* Aggiustamento padding per spazio sotto l'header */\n    margin-top: 12vh\n}\n\n#conversation-list h2 {\n    margin-top: 0;\n    color: #e4e6eb;\n}\n\n#conversation-list ul {\n    list-style-type: none;\n    padding: 0;\n    margin-top: 20px;\n}\n\n#conversation-list li {\n    padding: 10px;\n    cursor: pointer;\n    border-bottom: 1px solid #3A3B3C;\n}\n\n#conversation-list li:hover, #conversation-list li.active {\n    background-color: #3A3B3C;\n}\n\n#new-conversation {\n    margin-top: 20px;\n    width: 100%;\n    padding: 10px;\n    background-color: #4CAF50;\n    border: none;\n    color: white;\n    font-size: 16px;\n    cursor: pointer;\n}\n\n#chat-section {\n    width: 80%;\n    display: flex;\n    flex-direction: column;\n    padding-top: 45px; /* Aggiustamento padding per spazio sotto l'header */\n    padding-left: 30px; /* Aggiustamento padding per spazio sotto l'header */\n    padding-right: 30px; /* Aggiustamento padding per spazio sotto l'header */\n    border-radius: 10px;\n    margin-top: 12vh;\n    position: relative;\n}\n\n#chat-window {\n    flex-grow: 1;\n    padding: 20px;\n    overflow-y: auto;\n    background-color: #fff;\n}\n\n.message {\n    margin-bottom: 15px;\n    display: flex;\n}\n\n.message.user {\n    justify-content: flex-end;\n}\n\n.message.assistant {\n    justify-content: flex-start;\n}\n\n.message .content {\n    display: inline-block;\n    padding: 12px 15px;\n    border-radius: 18px;\n    max-width: 70%;\n    word-wrap: break-word;\n    font-size: 16px;\n    line-height: 1.4;\n}\n\n.message.user .content {\n    background-color: #0B93F6;\n    color: white;\n    border-bottom-right-radius: 0;\n}\n\n.message.user .content p {\n    margin: 0;\n}\n\n.message.assistant .content {\n    background-color: #E5E5EA;\n    color: black;\n    border-bottom-left-radius: 0;\n}\n\n.message.assistant .content p {\n    margin: 0;\n}\n\n.input-area {\n    height: 12vh;\n    display: flex;\n    padding: 8px;\n    background-color: #f0f2f5;\n    border-top: 1px solid #ccc;\n}\n\n#user-input {\n    height: 12vh;\n    flex-grow: 1;\n    padding: 8px 12px;\n    border: 1px solid #ccc;\n    border-radius: 18px;\n    font-size: 16px;\n    resize: none;\n}\n\n#send-button {\n    margin-left: 10px;\n    padding: 10px 20px;\n    background-color: #42b72a;\n    border: none;\n    border-radius: 18px;\n    color: white;\n    font-size: 18px;\n    cursor: pointer;\n}\n\n#send-button:hover {\n    background-color: #36a420;\n}\n\n/* Stili per il codice evidenziato */\n.content pre {\n    background-color: #2f2f2f;\n    color: #e4e6eb;\n    padding: 10px;\n    border-radius: 8px;\n    overflow-x: auto;\n    margin: 10px 0;\n}\n\n/* Aggiungere uno stile per gli scrollbar personalizzati (opzionale) */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f0f2f5;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #ccc;\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background-color: #aaa;\n}"
        }
    ]
}